{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","m","SearchBox","handleChange","placeholder","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAEaA,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCHPC,G,MAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACI,qBAAKP,UAAU,YAAf,SACKO,EAASC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAiBV,QAASU,GAAfA,EAAEN,WCJhCO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLD,YAAaA,EACbE,SAAUH,MC2CPI,G,wDA3Cb,aAAe,IAAD,8BACZ,gBAkBFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,4FASd,8BAAAI,EAAA,sEAKyBC,MAAM,8CAL/B,cAKQC,EALR,gBAMsBA,EAASC,OAN/B,OAMQC,EANR,OAOEC,KAAKV,SAAS,CAAEV,SAAUmB,IAP5B,gD,0EAcA,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YAEZU,EAAmBrB,EAASsB,QAAO,SAACpB,GAAD,OACvCA,EAAEL,KAAK0B,cAAcC,SAASb,EAAYY,kBAG5C,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEY,YAAY,kBACZD,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAtCVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ae97b1b.chunk.js","sourcesContent":["import './card.styles.css'\n\nexport const Card = ({monster}) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n        <h2>{monster.name}</h2>\n        <p>{monster.email}</p>\n    </div>\n)","import { Card } from '../card/card.component'\nimport './card-list.styles.css';\n\nexport const CardList = ({monsters}) => {\n    return (\n        <div className='card-list'>\n            {monsters.map( m => <Card key={m.id} monster={m} />)}\n        </div>\n    )\n}\n","import './search-box.styles.css';\n\nexport const SearchBox = ({handleChange, placeholder}) => {\n    return (\n        <input\n            className='search'\n            type=\"search\"\n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    )\n}\n","import { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n  }\n\n  async componentDidMount() {\n    /*     fetch(\n      'https://jsonplaceholder.typicode.com/users'\n    ).then (response => response.json())\n    .then (users => this.setState({monsters:users})) */\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\n    const users = await response.json()\n    this.setState({ monsters: users })\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n  \n  render() {\n    const { monsters, searchField } = this.state\n\n    const filteredMonsters = monsters.filter((m) =>\n      m.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder=\"search monsters\" \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}